- hosts: 127.0.0.1
  vars:
    nvim_cfg_url: "https://raw.githubusercontent.com/nicomiguelino/dotfiles/main/init.vim"
    nvim_cfg_dir: "{{ lookup('env', 'HOME') }}/.config/nvim"
    vim_plug_url: "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    vim_plug_default_dir: "{{ lookup('env', 'HOME') }}/.local/share"
    oh_my_zsh_url: "https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh"
    git_username: "nicomiguelino"
    git_email: "nicomiguelino2014@gmail.com"
    git_editor: "nvim"
    buildx_version: "v0.10.3"
  tasks:
    - name: Install development dependencies
      become: yes
      ansible.builtin.apt:
        update_cache: yes
        name:
          - bc
          - fzf
          - git
          - jq
          - neovim
          - ripgrep
          - tmux
          - tree
          - wget
          - zsh
        state: present
      register: aptout
    - name: Configure Git
      ansible.builtin.shell: |
        git config --global user.name "{{ git_username }}"
        git config --global user.email "{{ git_email }}"
        git config --global core.editor "{{ git_editor }}"
      args:
        executable: /bin/bash
    - name: Configure Neovim
      ansible.builtin.shell: |
        curl -sfLo {{ nvim_cfg_dir }}/init.vim --create-dirs {{ nvim_cfg_url }}
        curl -sfLo {{ vim_plug_default_dir }}/nvim/site/autoload/plug.vim --create-dirs {{ vim_plug_url }}
        nvim --headless +PlugInstall +qall
      args:
        executable: /bin/bash
    - name: Install Docker Buildx
      ansible.builtin.shell: |
        mkdir -p ~/.docker/cli-plugins

        prefix="https://github.com/docker/buildx/releases/download"
        binary="buildx-{{ buildx_version }}.linux-arm64"
        buildx_dl_url="$prefix/{{ buildx_version }}/$binary"

        wget -O ~/.docker/cli-plugins/docker-buildx $buildx_dl_url
        chmod +x ~/.docker/cli-plugins/docker-buildx
    - name: Install Oh My Zsh
      ansible.builtin.shell: |
        sh -c "$(curl -fsSL {{ oh_my_zsh_url }})" "" --unattended
      args:
        executable: /bin/bash
    - name: Resolve PAM auth failure in chsh
      become: yes
      ansible.builtin.shell: |
        before='\(auth\s\+\)required\(\s\+pam_shells.so\)'
        after='\1sufficient\2'
        sudo sed -i "s/$before/$after/g" /etc/pam.d/chsh
      args:
        executable: /bin/bash
    - name: Set Zsh as the default shell
      ansible.builtin.shell: |
        chsh -s /usr/bin/zsh
    - name: Create a directory for additional Zsh configs
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') }}/.zshrc.d"
        state: directory
    - name: Create a Zsh script for additional configs
      ansible.builtin.template:
        src: templates/zshrc.d/anthias.zsh.j2
        dest: "{{ lookup('env', 'HOME') }}/.zshrc.d/anthias.zsh"
    - name: Configure Zsh
      ansible.builtin.blockinfile:
        path: "{{ lookup('env', 'HOME') }}/.zshrc"
        block: |
          source ~/.zshrc.d/anthias.zsh
    - name: Install Oh My Tmux!
      ansible.builtin.shell: |
        cd
        git clone https://github.com/gpakosz/.tmux.git
        ln -s -f .tmux/.tmux.conf
        cp .tmux/.tmux.conf.local .
      args:
        executable: /bin/bash
    - name: Configure Oh My Tmux!
      # TODO: Make use of templates for this one.
      # https://garthkerr.com/using-ansible-template-for-partial-file-block/
      ansible.builtin.blockinfile:
        path: "{{ lookup('env', 'HOME') }}/.tmux.conf.local"
        block: |
          # Set default prefix back to C-b.
          set -g prefix2 C-b
          bind C-b send-prefix -2
          setw -g mode-keys vi

          # Enable the Powerline look.
          tmux_conf_theme_left_separator_main='\uE0B0'
          tmux_conf_theme_left_separator_sub='\uE0B1'
          tmux_conf_theme_right_separator_main='\uE0B2'
          tmux_conf_theme_right_separator_sub='\uE0B3'
